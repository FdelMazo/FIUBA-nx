Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def nestedsearch(el, lst_of_sets):
    return list(filter(lambda lst: el in lst, lst_of_sets))[0]

def armar_grupo(padron):
    camada = nestedsearch(padron, louvain)       
    subnetwork = nx.subgraph(G, camada)
    min_alumnos, max_alumnos = 6, 14
    max_iteraciones = 25
    
    i = 0
    grupo = []
    for i in range(max_iteraciones):
        sublouvains = community.louvain_communities(subnetwork, weight='corrnotas', resolution=1+(i*0.01))
        comunidad = nestedsearch(padron, sublouvains)
        if min_alumnos <= len(comunidad) <= max_alumnos:
            grupo = comunidad
            break
        elif not grupo or (len(comunidad) >= max_alumnos and (len(comunidad) - max_alumnos <= len(grupo) - max_alumnos)):
            grupo = comunidad
        i+=1

    return grupo

grupo = armar_grupo(PADRON)

plt.figure(figsize=(12,6))
plt.title(f"Posibles compa√±eros de TP de {PADRON}")
nx.draw_networkx(
    nx.subgraph(G, grupo), 
    width=0.02,
    font_size=16,
)
plt.show()

grupo.remove(padron)
print(f"Posibles compa√±eros de {PADRON}: {grupo}")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn [14], line 35[0m
[1;32m     28[0m nx[38;5;241m.[39mdraw_networkx(
[1;32m     29[0m     nx[38;5;241m.[39msubgraph(G, grupo), 
[1;32m     30[0m     width[38;5;241m=[39m[38;5;241m0.02[39m,
[1;32m     31[0m     font_size[38;5;241m=[39m[38;5;241m16[39m,
[1;32m     32[0m )
[1;32m     33[0m plt[38;5;241m.[39mshow()
[0;32m---> 35[0m grupo[38;5;241m.[39mremove(padron)
[1;32m     36[0m [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mPosibles compa√±eros de [39m[38;5;132;01m{[39;00mPADRON[38;5;132;01m}[39;00m[38;5;124m: [39m[38;5;132;01m{[39;00mgrupo[38;5;132;01m}[39;00m[38;5;124m"[39m)

[0;31mKeyError[0m: '107024'
KeyError: '107024'

