Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.local/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def corrnotas(row):
    if ((row['src_nota'] == -1 and row['dst_nota'] != -1) or
        (row['dst_nota'] == -1 and row['src_nota'] != -1)):
        return 7
    return abs(row['src_nota'] - row['dst_nota'])

df_nodes_metadata = df[df.columns & ["Padron", "Carrera", "aplazos", "optativas", "checkboxes"]]
df_nodes_metadata = df_nodes_metadata[df_nodes_metadata["aplazos"].notnull() | df_nodes_metadata["optativas"].notnull()]
df_nodes_metadata = df_nodes_metadata.groupby(["Padron", "Carrera"], as_index=False).first()

df_nodes = df[["Padron", "Carrera", "Orientacion", "Final de Carrera"]]
df_nodes = df_nodes.drop_duplicates()
df_nodes = df_nodes.merge(df_nodes_metadata, how="outer")
df_nodes.set_index("Padron", inplace=True)
display(df_nodes.dropna().sample(3))

from itertools import combinations
df_edges = (df[df['materia_cuatrimestre'].notnull()]
     .groupby(['materia_id', 'materia_cuatrimestre'])[['Padron', 'materia_nota']]
     .apply(lambda x : list(combinations(x.values,2)))
     .apply(pd.Series)
     .stack()
     .reset_index(level=0, name='Usuarios')
)

df_edges = df_edges.reset_index()
df_edges[['src', 'dst']] = df_edges['Usuarios'].tolist()
df_edges[['src_padron', 'src_nota']] = df_edges['src'].tolist()
df_edges[['dst_padron', 'dst_nota']] = df_edges['dst'].tolist()

# Nos quedamos solo con las materias aprobadas (nota > 0) o en final (-1)
df_edges = df_edges[(df_edges['src_nota'] != -2) & (df_edges['src_nota'] != 0)]
df_edges = df_edges[(df_edges['dst_nota'] != -2) & (df_edges['dst_nota'] != 0)]

# Calculamos la correlacion entre las notas
df_edges['corrnotas'] = df_edges.apply(corrnotas, axis=1)

df_edges = df_edges[['src_padron', 'dst_padron', 'materia_cuatrimestre', 'materia_id', 'src_nota', 'dst_nota', 'corrnotas']]
display(df_edges.dropna().sample(3))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn [2], line 15[0m
[1;32m     13[0m df_nodes [38;5;241m=[39m df_nodes[38;5;241m.[39mmerge(df_nodes_metadata, how[38;5;241m=[39m[38;5;124m"[39m[38;5;124mouter[39m[38;5;124m"[39m)
[1;32m     14[0m df_nodes[38;5;241m.[39mset_index([38;5;124m"[39m[38;5;124mPadron[39m[38;5;124m"[39m, inplace[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[0;32m---> 15[0m display(df_nodes[38;5;241m.[39mdropna()[38;5;241m.[39msample([38;5;241m3[39m))
[1;32m     17[0m [38;5;28;01mfrom[39;00m [38;5;21;01mitertools[39;00m [38;5;28;01mimport[39;00m combinations
[1;32m     18[0m df_edges [38;5;241m=[39m (df[df[[38;5;124m'[39m[38;5;124mmateria_cuatrimestre[39m[38;5;124m'[39m][38;5;241m.[39mnotnull()]
[1;32m     19[0m      [38;5;241m.[39mgroupby([[38;5;124m'[39m[38;5;124mmateria_id[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mmateria_cuatrimestre[39m[38;5;124m'[39m])[[[38;5;124m'[39m[38;5;124mPadron[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mmateria_nota[39m[38;5;124m'[39m]]
[1;32m     20[0m      [38;5;241m.[39mapply([38;5;28;01mlambda[39;00m x : [38;5;28mlist[39m(combinations(x[38;5;241m.[39mvalues,[38;5;241m2[39m)))
[0;32m   (...)[0m
[1;32m     23[0m      [38;5;241m.[39mreset_index(level[38;5;241m=[39m[38;5;241m0[39m, name[38;5;241m=[39m[38;5;124m'[39m[38;5;124mUsuarios[39m[38;5;124m'[39m)
[1;32m     24[0m )

File [0;32m~/.local/lib/python3.10/site-packages/pandas/core/generic.py:5778[0m, in [0;36mNDFrame.sample[0;34m(self, n, frac, replace, weights, random_state, axis, ignore_index)[0m
[1;32m   5775[0m [38;5;28;01mif[39;00m weights [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m   5776[0m     weights [38;5;241m=[39m sample[38;5;241m.[39mpreprocess_weights([38;5;28mself[39m, weights, axis)
[0;32m-> 5778[0m sampled_indices [38;5;241m=[39m [43msample[49m[38;5;241;43m.[39;49m[43msample[49m[43m([49m[43mobj_len[49m[43m,[49m[43m [49m[43msize[49m[43m,[49m[43m [49m[43mreplace[49m[43m,[49m[43m [49m[43mweights[49m[43m,[49m[43m [49m[43mrs[49m[43m)[49m
[1;32m   5779[0m result [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mtake(sampled_indices, axis[38;5;241m=[39maxis)
[1;32m   5781[0m [38;5;28;01mif[39;00m ignore_index:

File [0;32m~/.local/lib/python3.10/site-packages/pandas/core/sample.py:150[0m, in [0;36msample[0;34m(obj_len, size, replace, weights, random_state)[0m
[1;32m    147[0m     [38;5;28;01melse[39;00m:
[1;32m    148[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124mInvalid weights: weights sum to zero[39m[38;5;124m"[39m)
[0;32m--> 150[0m [38;5;28;01mreturn[39;00m [43mrandom_state[49m[38;5;241;43m.[39;49m[43mchoice[49m[43m([49m[43mobj_len[49m[43m,[49m[43m [49m[43msize[49m[38;5;241;43m=[39;49m[43msize[49m[43m,[49m[43m [49m[43mreplace[49m[38;5;241;43m=[39;49m[43mreplace[49m[43m,[49m[43m [49m[43mp[49m[38;5;241;43m=[39;49m[43mweights[49m[43m)[49m[38;5;241m.[39mastype(
[1;32m    151[0m     np[38;5;241m.[39mintp, copy[38;5;241m=[39m[38;5;28;01mFalse[39;00m
[1;32m    152[0m )

File [0;32mmtrand.pyx:909[0m, in [0;36mnumpy.random.mtrand.RandomState.choice[0;34m()[0m

[0;31mValueError[0m: a must be greater than 0 unless no samples are taken
ValueError: a must be greater than 0 unless no samples are taken

